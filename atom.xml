<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>行川居</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xingchuan.vip/"/>
  <updated>2019-07-19T05:53:54.847Z</updated>
  <id>http://xingchuan.vip/</id>
  
  <author>
    <name>川总</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络安全</title>
    <link href="http://xingchuan.vip/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8.html"/>
    <id>http://xingchuan.vip/网络安全.html</id>
    <published>2019-07-19T13:15:00.000Z</published>
    <updated>2019-07-19T05:53:54.847Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 19 2019 13:54:24 GMT+0800 (GMT+08:00) --><h3 id="一、黑客与安全"><a href="#一、黑客与安全" class="headerlink" title="一、黑客与安全"></a>一、黑客与安全</h3><h5 id="黑客："><a href="#黑客：" class="headerlink" title="黑客："></a>黑客：</h5><blockquote><ul><li>攻击手段分为非破坏性攻击和破坏性攻击。<blockquote><ul><li>非破坏型攻击：一般是为了扰乱系统的运行，使之暂时失去对外提供服务的能力，比如DDos攻击。</li><li>破坏性攻击：主要会造成两种后果:系统数据收送或者信息被窃取，比如CSRF攻击。</li></ul></blockquote></li><li>攻击手段有病毒式、洪水式、系统漏洞式。</li></ul></blockquote><h5 id="安全："><a href="#安全：" class="headerlink" title="安全："></a>安全：</h5><blockquote><ul><li>互联网企业都要建立一套完整的信息安全体系，遵循CIA原则，即保密性、完整性、可用性。<blockquote><ul><li>保密性：对需要保护的数据（例如用户的私人信息等）进行保密操作，无论是存储还是传输，都要保证用户数据及相关资源的安全。</li><li>完整性：访问的数据需要是完整的，而不是缺失或者篡改的，必然用户访问的数据就是不正确的。</li><li>可用性：服务必须是可用的。</li></ul></blockquote></li></ul></blockquote><hr><h3 id="二、SQL注入"><a href="#二、SQL注入" class="headerlink" title="二、SQL注入"></a>二、SQL注入</h3><blockquote><ul><li>SQL注入是注入式攻击中常见的类型，是未将代码与数据进行严格的隔离，导致在读取用户数据时候，错误的把数据作为代码的一部分执行，从而导致安全问题。</li></ul></blockquote><h5 id="常见案例："><a href="#常见案例：" class="headerlink" title="常见案例："></a>常见案例：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var testCondition;</span><br><span class="line">testCondition = Request.from(&quot;testCondition&quot;)</span><br><span class="line">var sql = &quot;select * from TableA where id =&apos;&quot;+ testCondition +&quot;&apos;&quot;;</span><br></pre></td></tr></table></figure><blockquote><p>上面例子，若果用户只输入ID是一个数字是没有问题的，但是如果用”;”隔开，在testCondition中插入其他SQL，则会带来意想不到的结果。</p></blockquote><h5 id="如何预防？"><a href="#如何预防？" class="headerlink" title="如何预防？"></a>如何预防？</h5><blockquote><ul><li>过滤用户输入参数中的特殊字符，从而降低被SQL注入的风险；</li><li>禁止通过字符串凭借的SQL语句，严格使用参数绑定传入的SQL参数；</li><li>合理使用数据库访问框架提供的防注入机制。例如Mybatis提供的#{} 绑定数据，从而防止SQL注入。同时谨慎使用${},${}相当于使用字符串拼接SQL，拒绝拼接的SQL语句，使用参数化的语句。</li></ul></blockquote><hr><h3 id="三、XSS与CSRF"><a href="#三、XSS与CSRF" class="headerlink" title="三、XSS与CSRF"></a>三、XSS与CSRF</h3><h5 id="XSS"><a href="#XSS" class="headerlink" title="XSS:"></a>XSS:</h5><blockquote><ul><li>跨站脚本攻击，指黑客通过技术手段，向正常用户请求的HTML页面中插入恶意的脚本，从而可以执行任意脚本,比如如下代码可能造成XSS漏洞</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h3&gt;反射型xss示例&lt;h3&gt;</span><br><span class="line">&lt;br&gt;用户：&lt;%= request.getParameter(&quot;userName&quot;) %&gt;</span><br><span class="line">&lt;br&gt;系统错误信息：&lt;%= request.getParameter(&quot;errorMessage&quot;) %&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码从HTTP请求中获取了userName和errorMessage两个参数，并直接输出到HTML中展示，当黑客构造如下的URL时出现了反射型XSS</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xss.demo/self-xss.jsp?userName= 张三&lt;script&gt;alert(&quot;张三&quot;)&lt;/script&gt;&amp;errorMessage=XSS示例&lt;script src=http://hacker.demo/xss-script.js /&gt;</span><br></pre></td></tr></table></figure><h6 id="防范措施："><a href="#防范措施：" class="headerlink" title="防范措施："></a>防范措施：</h6><blockquote><ul><li>使用Jsonp框架对用户输入字符串做XSS过滤；</li><li>使用框架的工具类对用户输入的字符串做HTML转义，例如Spring提供的HtmlUtils；</li><li>前端展示数据时使用innerText而不是innerHTML。</li></ul></blockquote><h5 id="CSRF："><a href="#CSRF：" class="headerlink" title="CSRF："></a>CSRF：</h5><blockquote><ul><li>跨站请求伪造，在用户不知情的情况下，冒用用户发起请求，在当前已经登录的Web应用上执行恶意操作，如恶意发帖，修改密码等。比如某用户A登录了网上银行，这时黑客给他发了一条连接如下：</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https//net_bank.demo/transfer.do?targetAccount=12345&amp;amount=100</span><br></pre></td></tr></table></figure><blockquote><p>如果用户在打开网银的浏览器中点开了黑客发送的URL,那么就有可能给黑客转账100元。</p></blockquote><h6 id="防范措施：-1"><a href="#防范措施：-1" class="headerlink" title="防范措施："></a>防范措施：</h6><blockquote><ul><li>CSRF Token验证，利用浏览器的同源限制，在HTTP接口执行前验证页面或者Cookie中设置的Token，只有验证通过才能继续执行请求；</li><li>人机交互，比如在调用网上银行转账时校验短信验证码。</li></ul></blockquote><hr><h3 id="四、两者差别"><a href="#四、两者差别" class="headerlink" title="四、两者差别"></a>四、两者差别</h3><blockquote><ul><li>XSS是在正常用户请求的HTML页面中执行了黑客提供的恶意代码；CSRF是黑客直接盗用浏览器中的登录信息，冒充用户去执行黑客指定的操作。XSS问题出在用户数据没有过滤、转义；CSRF问题出现在HTTP接口没有防范不受信任的调用。</li></ul></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 19 2019 13:54:24 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;一、黑客与安全&quot;&gt;&lt;a href=&quot;#一、黑客与安全&quot; class=&quot;headerlink&quot; title=&quot;一、黑客与安全&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="笔记" scheme="http://xingchuan.vip/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://xingchuan.vip/tags/java/"/>
    
      <category term="socket" scheme="http://xingchuan.vip/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>什么是TCP/IP</title>
    <link href="http://xingchuan.vip/TCP-IP.html"/>
    <id>http://xingchuan.vip/TCP-IP.html</id>
    <published>2019-07-19T09:44:00.000Z</published>
    <updated>2019-07-19T02:25:09.012Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 19 2019 13:54:24 GMT+0800 (GMT+08:00) --><h3 id="一、网络协议"><a href="#一、网络协议" class="headerlink" title="一、网络协议"></a>一、网络协议</h3><h5 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP :"></a>TCP/IP :</h5><blockquote><ul><li>中文翻译为传输控制协议，通常有4层协议：应用层、传输层、网络层、链路层。</li></ul></blockquote><h5 id="链路层："><a href="#链路层：" class="headerlink" title="链路层："></a>链路层：</h5><blockquote><ul><li>主要有IEEE 802.x/PPP 等，以字节为单位把0与1进行分组，定义数据帧，写入源和目标机器的物理地址、数据、校验位来传输数据。</li></ul></blockquote><h5 id="网络层："><a href="#网络层：" class="headerlink" title="网络层："></a>网络层：</h5><blockquote><ul><li>主要有IP/APR等，根据IP定义网络地址，区分网段。子网内根据地址解析协议（ARP）进行MAC寻址，子网外进行路由转发数据包，这个数据包即为IP数据包。</li></ul></blockquote><h5 id="传输层："><a href="#传输层：" class="headerlink" title="传输层："></a>传输层：</h5><blockquote><ul><li>主要有TPC/UDP等，数据包通过网络层发送到目标计算机后，应用程序在传输层定义逻辑端口，确认身份，把数据包交给应用程序，实现端口与端口间的通信。</li></ul></blockquote><h5 id="应用层："><a href="#应用层：" class="headerlink" title="应用层："></a>应用层：</h5><blockquote><ul><li>主要有HTTP/FTP/SMTP等，传输层的数据到达应用程序后，以某种统一规定的协议格式解读数据。</li></ul></blockquote><hr><h3 id="二、IP协议"><a href="#二、IP协议" class="headerlink" title="二、IP协议"></a>二、IP协议</h3><blockquote><ul><li>IP协议是面向无连接、无状态、没有额外的机制保证发送的包是否有序到达。</li><li>是TCP/IP的基石，几乎所有其他协议都是建立在IP所提供的服务基础上进行传输，其中包括在实际应用中用于传输稳定有序数据的TCP。</li></ul></blockquote><hr><h3 id="三、TPC建立链接"><a href="#三、TPC建立链接" class="headerlink" title="三、TPC建立链接"></a>三、TPC建立链接</h3><blockquote><ul><li>传输控制协议。是一种面向连接、确保数据在端与端之间可靠传输的协议。</li><li>三次握手:<blockquote><ul><li>A机器发出一个数据包并将SYN置1，表示希望建立连接；</li><li>B机器收到A机器发过来的数据包，通过SYN得知这是一个建立连接的请求，于是发送一个响应包并将SYN和ACK标记都置为1。假设这个包中的序列号是y，而确认序列号必须是x+1，表示收到了A发过来的SYN，在TCP中，SYN被当做数据部分的一个字节；</li><li>A收到B的响应包后进行确认，确认包中将ACK置为1，并将确认序列号置为y+1，表示收到来自B的SYN。</li></ul></blockquote></li><li>目的： 信息对等，防止超时。</li></ul></blockquote><hr><h3 id="四、TCP断开连接"><a href="#四、TCP断开连接" class="headerlink" title="四、TCP断开连接"></a>四、TCP断开连接</h3><blockquote><ul><li>四次挥手：<blockquote><ul><li>A机器想要关闭连接，则待本方数据发送完毕之后，传递FIN信号给B机器；</li><li>B机器应答ACK，告诉A机器可以断开，但是要等B机器处理完数据，再主动给A机器发送FIN信号，此时A机器处于半关闭状态，无法发送新的数据；</li><li>B机器做好链接关闭的准备后，发送FIN信号给A机器，此时B机器也进入半关闭状态；</li><li>A机器发送针对B机器FIN的ACK后，进入TIME-WAIT状态，经过2MSL后，没有收到B发送的报文，则确定B机器已经收到A机器最后发送的ACK命令，此时TCP正式释放。</li></ul></blockquote></li></ul></blockquote><hr><h3 id="五、常见问题"><a href="#五、常见问题" class="headerlink" title="五、常见问题"></a>五、常见问题</h3><h5 id="1-TCP和UDP区别？"><a href="#1-TCP和UDP区别？" class="headerlink" title="1. TCP和UDP区别？"></a>1. TCP和UDP区别？</h5><blockquote><ul><li>TCP:<blockquote><ul><li>面向连接</li><li>点到点通信</li><li>高可靠性</li><li>占用系统资源多、效率低</li><li>利用IO流实现数据的传输</li><li>响应式请求</li></ul></blockquote></li></ul></blockquote><blockquote><ul><li>UDP:<blockquote><ul><li>非面向连接，传输不可靠，可能丢失</li><li>发送不管对方是否准备好，接受到也不确认</li><li>可以广播发送</li><li>非常简单的协议，开销小</li><li>效率高，不用IO流实现数据的传输</li></ul></blockquote></li></ul></blockquote><h5 id="2-为什么连接的时候是三次握手，断开的时候是四次挥手？"><a href="#2-为什么连接的时候是三次握手，断开的时候是四次挥手？" class="headerlink" title="2. 为什么连接的时候是三次握手，断开的时候是四次挥手？"></a>2. 为什么连接的时候是三次握手，断开的时候是四次挥手？</h5><blockquote><ul><li>当服务端收到客户端的连接请求报文时，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的，但是关闭连接时候，当服务端收到FIN报文时，不会立刻关闭SOCKET，只能先回复一个ACK报文，告诉客户端你的FIN报文收到了，只有等我服务端所有的报文发送完，我才能发送FIN报文，因此不能一次发送，需要四步。</li></ul></blockquote><h5 id="3-为什么不用两次握手链接？"><a href="#3-为什么不用两次握手链接？" class="headerlink" title="3.为什么不用两次握手链接？"></a>3.为什么不用两次握手链接？</h5><blockquote><ul><li>容易发生死锁，客户端在服务端的应答分组在传输中被丢失的情况下，将不知道服务端是否准备好，不知道服务端建立什么样的序列号，在这种情况下，客户端认为链接还未建立，将忽略服务端发来的任何数据分组，只能等待链接确认才应答f分组，而服务端发出的分组超时后，重复发送同样的分组，这样就行成了死锁。</li></ul></blockquote><h5 id="4-为什么TIME-WAIT状态需要经过2MSL才能返回到Close状态？"><a href="#4-为什么TIME-WAIT状态需要经过2MSL才能返回到Close状态？" class="headerlink" title="4.为什么TIME-WAIT状态需要经过2MSL才能返回到Close状态？"></a>4.为什么TIME-WAIT状态需要经过2MSL才能返回到Close状态？</h5><blockquote><ul><li>按照道理来说，四个报文发送完毕，我们可以直接进入CLOSE状态，但是我们假象网络是不可靠的，有可能最后一个ACK丢失，所以TIME-WAIT状态是用来重发可能丢失的ACK报文。在客户端发送出最后的ACK回复，但该ACK可能丢失，服务端如果没有收到ACK，则不断的发送FIN片段，所以客户端不能立即关闭，它必须确认客户端收到了该ACK，此时设置了一个定时器，如果直到2MSL，客户端都没有收到FIN，则推断ACK已经成功被接收，关闭连接。</li></ul></blockquote><h5 id="5-如果已经建立了连接，但是客户端突然出现故障怎么办？"><a href="#5-如果已经建立了连接，但是客户端突然出现故障怎么办？" class="headerlink" title="5.如果已经建立了连接，但是客户端突然出现故障怎么办？"></a>5.如果已经建立了连接，但是客户端突然出现故障怎么办？</h5><blockquote><ul><li>TPC设有一个保活计时器，服务端每次接收到请求都会重新复位这个计时器，时间通常是2小时，若2小时没有收到客户端的任何数据，则服务端会发送一个探测报文段，以后每隔75秒发送一次，若一连发送10个探测报文都没有反应，则认为客户端发生故障，关闭连接。</li></ul></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 19 2019 13:54:24 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;一、网络协议&quot;&gt;&lt;a href=&quot;#一、网络协议&quot; class=&quot;headerlink&quot; title=&quot;一、网络协议&quot;&gt;&lt;/a&gt;一、网
      
    
    </summary>
    
      <category term="笔记" scheme="http://xingchuan.vip/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://xingchuan.vip/tags/java/"/>
    
      <category term="socket" scheme="http://xingchuan.vip/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>java从入门到精通</title>
    <link href="http://xingchuan.vip/java%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A.html"/>
    <id>http://xingchuan.vip/java从入门到精通.html</id>
    <published>2019-06-17T15:45:00.000Z</published>
    <updated>2019-06-19T02:12:16.274Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 19 2019 13:54:24 GMT+0800 (GMT+08:00) --><p>字段解释：<br>这边title指的是文章的标题。<br>data指的是文章的创建时间，文章的排序规则也是根据这个字段来的，时间越后，排序越靠前。<br>tags指的是这个文章所对应的标签。<br>categories指的是文章所对应的分类。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 19 2019 13:54:24 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;字段解释：&lt;br&gt;这边title指的是文章的标题。&lt;br&gt;data指的是文章的创建时间，文章的排序规则也是根据这个字段来的，时间越后，排序越靠前
      
    
    </summary>
    
      <category term="技术" scheme="http://xingchuan.vip/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://xingchuan.vip/tags/java/"/>
    
      <category term="springboot" scheme="http://xingchuan.vip/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://xingchuan.vip/hello-world.html"/>
    <id>http://xingchuan.vip/hello-world.html</id>
    <published>2019-06-17T06:50:06.067Z</published>
    <updated>2019-06-19T02:11:54.999Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 19 2019 13:54:24 GMT+0800 (GMT+08:00) --><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 19 2019 13:54:24 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hex
      
    
    </summary>
    
    
  </entry>
  
</feed>
